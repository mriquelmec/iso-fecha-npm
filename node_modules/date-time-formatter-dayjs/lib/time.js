"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFutureDate = exports.formatTime = exports.now = void 0;
var lodash_1 = __importDefault(require("lodash"));
var dayjs_1 = require("./dayjs");
function now() {
    return (0, dayjs_1.DayJS)();
}
exports.now = now;
function formatTime(payload, format, options) {
    var _a, _b;
    if (!payload) {
        return '';
    }
    var isEpoch = (_a = options === null || options === void 0 ? void 0 : options.epoch) !== null && _a !== void 0 ? _a : false;
    var is24Hour = (_b = options === null || options === void 0 ? void 0 : options.get24Hour) !== null && _b !== void 0 ? _b : false;
    var dayjs = isEpoch || lodash_1.default.isNumber(payload) ? dayjs_1.DayJS.unix(payload) : (0, dayjs_1.DayJS)(payload);
    if (options === null || options === void 0 ? void 0 : options.timezone) {
        dayjs.tz(options.timezone);
    }
    if (options === null || options === void 0 ? void 0 : options.locale) {
        dayjs.locale(options.locale);
    }
    switch (format) {
        case 'date':
            return dayjs.format('YYYY-MM-DD');
        case 'datetime':
            return is24Hour ? dayjs.format('YYYY-MM-DD HH:mm:ss') : dayjs.format('YYYY-MM-DD hh:mm:ss A');
        case 'time':
            return is24Hour ? dayjs.format('HH:mm:ss') : dayjs.format('hh:mm:ss A');
        case 'iso':
            return dayjs.toISOString();
        case 'unix':
            return dayjs.unix();
        default:
            return dayjs.format(format);
    }
}
exports.formatTime = formatTime;
function getFutureDate(initialDate, value, unit, format, options) {
    var _a, _b, _c, _d, _e;
    if (unit === void 0) { unit = 'day'; }
    if (format === void 0) { format = 'datetime'; }
    if (!initialDate) {
        return '';
    }
    var getTimeInstance = (_a = options === null || options === void 0 ? void 0 : options.getDateInstance) !== null && _a !== void 0 ? _a : false;
    var isEpoch = (_b = options === null || options === void 0 ? void 0 : options.epoch) !== null && _b !== void 0 ? _b : false;
    var dayjs = isEpoch || lodash_1.default.isNumber(initialDate) ? dayjs_1.DayJS.unix(initialDate) : (0, dayjs_1.DayJS)(initialDate);
    if (options === null || options === void 0 ? void 0 : options.timezone) {
        dayjs.tz(options.timezone);
    }
    if (options === null || options === void 0 ? void 0 : options.locale) {
        dayjs.locale(options.locale);
    }
    if (lodash_1.default.isNumber(value)) {
        return dayjs.add(value, unit).format('YYYY-MM-DD');
    }
    if (!lodash_1.default.isNumber(value) && lodash_1.default.isPlainObject(value)) {
        return dayjs
            .add((_c = value.hour) !== null && _c !== void 0 ? _c : 0, 'hour')
            .add((_d = value.minute) !== null && _d !== void 0 ? _d : 0, 'minute')
            .add((_e = value.second) !== null && _e !== void 0 ? _e : 0, 'second');
    }
    return getTimeInstance ? dayjs : formatTime(dayjs, format, options);
}
exports.getFutureDate = getFutureDate;
